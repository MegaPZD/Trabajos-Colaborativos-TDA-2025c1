from suma_encadenada import suma_encadenada_minima

n_optimo = {
    1: 1, 2: 2, 3: 3, 4: 3, 5: 4, 6: 4, 7: 5, 8: 4, 9: 5, 10: 5, 11: 6, 12: 5, 13: 6, 14: 6, 15: 6,
    16: 5, 17: 6, 18: 6, 19: 7, 20: 6, 21: 7, 22: 7, 23: 7, 24: 6, 25: 7, 26: 7, 27: 7, 28: 7, 29: 8,
    30: 7, 31: 8, 32: 6, 33: 7, 34: 7, 35: 8, 36: 7, 37: 8, 38: 8, 39: 8, 40: 7, 41: 8, 42: 8, 43: 8,
    44: 8, 45: 8, 46: 8, 47: 9, 48: 7, 49: 8, 50: 8, 51: 8, 52: 8, 53: 9, 54: 8, 55: 9, 56: 8, 57: 9,
    58: 9, 59: 9, 60: 8, 61: 9, 62: 9, 63: 9, 64: 7, 65: 8, 66: 8, 67: 9, 68: 8, 69: 9, 70: 9, 71: 10,
    72: 8, 73: 9, 74: 9, 75: 9, 76: 9, 77: 9, 78: 9, 79: 10, 80: 8, 81: 9, 82: 9, 83: 9, 84: 9, 85: 9,
    86: 9, 87: 10, 88: 9, 89: 10, 90: 9, 91: 10, 92: 9, 93: 10, 94: 10, 95: 10, 96: 8, 97: 9, 98: 9,
    99: 9, 100: 9, 101: 10, 102: 9, 103: 10, 104: 9, 105: 10, 106: 10, 107: 10, 108: 9, 109: 10,
    110: 10, 111: 10, 112: 9, 113: 10, 114: 10, 115: 10, 116: 10, 117: 10, 118: 10, 119: 10,
    120: 9, 121: 10, 122: 10, 123: 10, 124: 10, 125: 10, 126: 10, 127: 11, 128: 8, 129: 9,
    130: 9, 131: 10, 132: 9, 133: 10, 134: 10, 135: 10, 136: 9, 137: 10, 138: 10, 139: 11,
    140: 10, 141: 11, 142: 11, 143: 11, 144: 9, 145: 10, 146: 10, 147: 10, 148: 10, 149: 11,
    150: 10, 151: 11, 152: 10, 153: 11, 154: 11, 155: 11, 156: 10, 157: 11, 158: 11, 159: 11,
    160: 9, 161: 10, 162: 10, 163: 11, 164: 10, 165: 11, 166: 11, 167: 11, 168: 10, 169: 11,
    170: 11, 171: 11, 172: 11, 173: 11, 174: 11, 175: 12, 176: 10, 177: 11, 178: 11, 179: 11,
    180: 10, 181: 11, 182: 11, 183: 11, 184: 11, 185: 11, 186: 11, 187: 12, 188: 11, 189: 12,
    190: 11, 191: 12, 192: 9, 193: 10, 194: 10, 195: 11, 196: 10, 197: 11, 198: 11, 199: 12,
    200: 10, 201: 11, 202: 11, 203: 11, 204: 11, 205: 11, 206: 11, 207: 12, 208: 10, 209: 11,
    210: 11, 211: 12, 212: 11, 213: 12, 214: 12, 215: 12, 216: 10, 217: 11, 218: 11, 219: 11,
    220: 11, 221: 12, 222: 11, 223: 12, 224: 10, 225: 11, 226: 11, 227: 12, 228: 11, 229: 12,
    230: 12, 231: 12, 232: 11, 233: 12, 234: 12, 235: 12, 236: 12, 237: 12, 238: 12, 239: 13,
    240: 10, 241: 11, 242: 11, 243: 11, 244: 11, 245: 11, 246: 11, 247: 12, 248: 11, 249: 12,
    250: 11, 251: 12, 252: 11, 253: 12, 254: 12, 255: 12, 256: 9, 257: 10, 258: 10, 259: 11,
    260: 10, 261: 11, 262: 11, 263: 12, 264: 10, 265: 11, 266: 11, 267: 11, 268: 11, 269: 12,
    270: 11, 271: 12, 272: 10, 273: 11, 274: 11, 275: 11, 276: 11, 277: 12, 278: 12, 279: 12,
    280: 11, 281: 12, 282: 12, 283: 12, 284: 12, 285: 12, 286: 12, 287: 13, 288: 10, 289: 11,
    290: 11, 291: 11, 292: 11, 293: 12, 294: 11, 295: 12, 296: 11, 297: 12, 298: 12, 299: 12,
    300: 11, 301: 12, 302: 12, 303: 12, 304: 11, 305: 12, 306: 12, 307: 13, 308: 12, 309: 13,
    310: 12, 311: 13, 312: 11, 313: 12, 314: 12, 315: 12, 316: 12, 317: 13, 318: 12, 319: 13,
    320: 10, 321: 11, 322: 11, 323: 12, 324: 11, 325: 12, 326: 12, 327: 13, 328: 11, 329: 12,
    330: 12, 331: 13, 332: 12, 333: 13, 334: 13, 335: 13, 336: 11, 337: 12, 338: 12, 339: 12,
    340: 12, 341: 13, 342: 12, 343: 13, 344: 12, 345: 13, 346: 13, 347: 13, 348: 12, 349: 13,
    350: 13, 351: 13, 352: 11, 353: 12, 354: 12, 355: 12, 356: 12, 357: 13, 358: 13, 359: 13,
    360: 11, 361: 12, 362: 12, 363: 12, 364: 12, 365: 12, 366: 12, 367: 13, 368: 11, 369: 12,
    370: 12, 371: 13, 372: 12, 373: 13, 374: 13, 375: 13, 376: 12, 377: 13, 378: 13, 379: 14,
    380: 13, 381: 14, 382: 14, 383: 14, 384: 10, 385: 11, 386: 11, 387: 12, 388: 11, 389: 12,
    390: 12, 391: 13, 392: 11, 393: 12, 394: 12, 395: 13, 396: 12, 397: 13, 398: 13, 399: 13,
    400: 11, 401: 12, 402: 12, 403: 12, 404: 12, 405: 12, 406: 12, 407: 13, 408: 11, 409: 12,
    410: 12, 411: 12, 412: 12, 413: 13, 414: 12, 415: 13, 416: 11, 417: 12, 418: 12, 419: 13,
    420: 12, 421: 13, 422: 13, 423: 13, 424: 12, 425: 13, 426: 13, 427: 13, 428: 13, 429: 13,
    430: 13, 431: 14, 432: 11, 433: 12, 434: 12, 435: 12, 436: 12, 437: 13, 438: 12, 439: 13,
    440: 12, 441: 13, 442: 13, 443: 13, 444: 13, 445: 13, 446: 13, 447: 14, 448: 12, 449: 13,
    450: 13, 451: 13, 452: 13, 453: 14, 454: 14, 455: 14, 456: 12, 457: 13, 458: 13, 459: 13,
    460: 13, 461: 13, 462: 13, 463: 14, 464: 12, 465: 13, 466: 13, 467: 14, 468: 13, 469: 14,
    470: 14, 471: 14, 472: 13, 473: 14, 474: 14, 475: 14, 476: 14, 477: 14, 478: 14, 479: 15,
    480: 12, 481: 13, 482: 13, 483: 13, 484: 13, 485: 13, 486: 13, 487: 14, 488: 13, 489: 14,
    490: 13, 491: 14, 492: 13, 493: 14, 494: 14, 495: 14, 496: 12, 497: 13, 498: 13, 499: 13,
    500: 13
}

error = False

def error_en_sumable(resultado_obtenido, n):
    if resultado_obtenido[-1] != n:
        return True
    for i in range((len(resultado_obtenido) - 2), -1, -1):
        if not any(resultado_obtenido[i] + resultado_obtenido[j] == resultado_obtenido[i+1] for j in range(i, -1, -1)):
            print(f"no se pudo sumar el numero {i} en la suma encadenada de {n}")
            return True
    return False

for i in range (3, 501):
    resultado = suma_encadenada_minima(i)
    if len(resultado) > n_optimo[i]:
        print(f"en la suma encadenada {resultado} no se encontro el optimo suma minima de: {n_optimo[i]} elementos")
        error = True
        break
    if error_en_sumable(resultado, i):
        print(f"en la suma encadenada {resultado} no es capaz de hacer la suma encadenada para {i}")
        error = True
        break
if not error:
    print("coinciden todos los optimos")